#!/usr/bin/env bash

# Define cache file locations
CACHE_DIR="/var/tmp/dotnet-launcher-cache"
# Get current directory name to use as project identifier
PROJECT_ID=$(basename "$(pwd)")
CACHE_PROJECT_FILE="$CACHE_DIR/${PROJECT_ID}_project"
CACHE_PROFILE_FILE="$CACHE_DIR/${PROJECT_ID}_profile"

# Create cache directory if it doesn't exist
mkdir -p "$CACHE_DIR"

# Show help message
show_help() {
  echo "Usage: $(basename "$0") [OPTION]"
  echo
  echo "Launch a .NET project with interactive selection of project and profile."
  echo
  echo "Options:"
  echo "  -h, --help    Display this help message and exit"
  echo "  -c, --clear   Clear cached selections for current project"
  echo "  --clearAll    Clear cached selections for all projects"
  echo
  echo "The script caches project and profile selections in $CACHE_DIR"
  echo "and will use these values for subsequent runs for the current directory."
}

# === Process Command Line Arguments ===
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
  exit 0
fi

# === Clear All Cache ===
if [[ "$1" == "--clearAll" ]]; then
  rm -rf $CACHE_DIR
  echo "All cache files successfully cleared."
  exit 0
fi

# === Clear Cache ===
if [[ "$1" == "-c" || "$1" == "--clear" ]]; then
  rm -f "$CACHE_PROJECT_FILE" "$CACHE_PROFILE_FILE"
  echo "Cache successfully cleared for project: $PROJECT_ID"
  exit 0
fi

# Read from cache files
CACHE_PROJECT=""
CACHE_PROFILE=""
[ -f "$CACHE_PROJECT_FILE" ] && CACHE_PROJECT=$(cat "$CACHE_PROJECT_FILE")
[ -f "$CACHE_PROFILE_FILE" ] && CACHE_PROFILE=$(cat "$CACHE_PROFILE_FILE")

# === Step 1: dotnet watch? ===
read -rp "Use 'dotnet watch'? (y/N): " use_watch
use_watch=${use_watch:-N}
if [[ "$use_watch" =~ ^[Yy]$ ]]; then
  WATCH="yes"
else
  WATCH="no"
fi

# === Step 2: Project selection ===
if [ -z "$CACHE_PROJECT" ]; then
  PROJECT=$(find . -name '*.csproj' | fzf --prompt="Select .csproj: ")
  if [ -z "$PROJECT" ]; then
    echo "Project not selected."
    exit 1
  fi
  echo "$PROJECT" > "$CACHE_PROJECT_FILE"
else
  PROJECT="$CACHE_PROJECT"
fi

# === Step 3: Select launch profile ===
LAUNCH_SETTINGS_PATH="$(dirname "$PROJECT")/Properties/launchSettings.json"
if [ ! -f "$LAUNCH_SETTINGS_PATH" ]; then
  echo "launchSettings.json not found in $LAUNCH_SETTINGS_PATH"
  exit 1
fi

if [ -z "$CACHE_PROFILE" ]; then
  PROFILES=$(yq -r '.profiles | keys[]' "$LAUNCH_SETTINGS_PATH")
  PROFILE=$(echo -e "$PROFILES" | fzf --prompt="Select launchProfile: ")
  if [ -z "$PROFILE" ]; then
    echo "Profile not selected."
    exit 1
  fi
  echo "$PROFILE" > "$CACHE_PROFILE_FILE"
else
  PROFILE="$CACHE_PROFILE"
fi

# === Step 4: Build project ===
CMD="dotnet build $PROJECT --verbosity detailed"
echo "Start command: $CMD"
if ! $CMD; then
  exit 1
fi

# === Step 5: Run command ===
if [[ "$WATCH" == "yes" ]]; then
  CMD="dotnet watch run --no-hot-reload --no-build --project $PROJECT --launch-profile $PROFILE"
else
  CMD="dotnet run --no-build --project $PROJECT --launch-profile $PROFILE"
fi
echo "Start command: $CMD"
exec $CMD
